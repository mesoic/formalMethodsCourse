\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Dec 31 16:36:01 CET 2020
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:teaching , methodExpansion-methodExpansion\\:noRestriction
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Labels]UseOriginLabels=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]MaximumNumberOfAutomaticApplications=500
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[SMTSettings]explicitTypeHierarchy=false
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Thu Dec 31 16:36:01 CET 2020
name=BinarySearch[BinarySearch\\:\\:performBinarySearch()].JML normal_behavior operation contract.0
contract=BinarySearch[BinarySearch\\:\\:performBinarySearch()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mesoic" ) (keyVersion "a6034b00a3"))

(autoModeTime "4051")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self_25,result_21,exc_25,heapAtPre_0,o,f") (userinteraction))
 (builtin "One Step Simplification" (formula "1"))
 (builtin "One Step Simplification" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "exLeft" (formula "6") (inst "sk=q_0"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "assignment" (formula "12"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0,0"))
(rule "nnf_imp2or" (formula "5") (term "0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0"))
(rule "Class_invariant_axiom_for_BinarySearch" (formula "9") (ifseqformula "3"))
(rule "true_left" (formula "9"))
(rule "commute_or_2" (formula "5") (term "0,0,0"))
(rule "commute_or" (formula "5") (term "0,0,0,0"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_performBinarySearch,savedHeapBefore_performBinarySearch"))
 (builtin "One Step Simplification" (formula "11"))
(rule "methodCallUnfoldArguments" (formula "11") (term "1"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "var"))
(rule "stringAssignment" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
 (builtin "One Step Simplification" (formula "1"))
 (builtin "One Step Simplification" (formula "2"))
(rule "notLeft" (formula "1"))
(rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,0") (ifseqformula "2"))
(rule "replace_known_right" (formula "9") (term "0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "9"))
(rule "methodCallWithinClass" (formula "14") (term "1") (userinteraction))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "message"))
(rule "assignment" (formula "14") (term "1"))
 (builtin "One Step Simplification" (formula "14"))
(rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_report,savedHeapBefore_report"))
 (builtin "One Step Simplification" (formula "14"))
(rule "methodCallEmptyReturn" (formula "14") (term "1"))
(rule "blockEmpty" (formula "14") (term "1"))
(rule "methodCallUnfoldArguments" (formula "14") (term "1"))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "var_1"))
(rule "assignment_read_attribute_this" (formula "14") (term "1"))
 (builtin "One Step Simplification" (formula "14"))
 (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_eliminateDuplicates,exc_26,heapAfter_eliminateDuplicates,anon_heap_eliminateDuplicates") (contract "BinarySearch[BinarySearch::eliminateDuplicates([I)].JML normal_behavior operation contract.0"))
(branch "Post (eliminateDuplicates)"
   (rule "blockEmpty" (formula "16") (term "1,1") (userinteraction))
   (rule "methodCallWithinClass" (formula "16") (term "1,1") (userinteraction))
    (builtin "One Step Simplification" (formula "16"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "message_1"))
   (rule "compound_addition_2" (formula "16") (term "1") (inst "#v1=x") (inst "#v0=s"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "s"))
   (rule "stringAssignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
    (builtin "One Step Simplification" (formula "1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "notLeft" (formula "1"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x"))
   (rule "assignment_read_attribute_this" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "pullOutSelect" (formula "18") (term "0,1,0") (inst "selectSK=BinarySearch_query_0"))
   (rule "stringConcatIntExpRight" (formula "19") (term "1") (inst "sk=sk_0"))
    (builtin "One Step Simplification" (formula "21"))
    (builtin "One Step Simplification" (formula "20"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "poolKeyIsContentOfValue" (formula "1") (term "0,1"))
   (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=java_lang_Object_created__0"))
   (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
   (rule "hideAuxiliaryEqConcrete" (formula "4"))
   (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_report_0,savedHeapBefore_report_0"))
    (builtin "One Step Simplification" (formula "21"))
   (rule "methodCallEmptyReturn" (formula "21") (term "1"))
   (rule "blockEmpty" (formula "21") (term "1"))
   (rule "variableDeclarationAssign" (formula "21") (term "1"))
   (rule "variableDeclaration" (formula "21") (term "1") (newnames "searchResult"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "1") (inst "iv=iv"))
   (rule "andLeft" (formula "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "add_literals" (formula "1") (term "1,0,1"))
   (rule "add_literals" (formula "1") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
   (rule "applyEq" (formula "2") (term "0,0,1,0") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "applyEqRigid" (formula "1") (term "0,0") (ifseqformula "2"))
   (rule "lenOfSeqConcat" (formula "1") (term "0"))
   (rule "polySimp_homoEq" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "add_literals" (formula "1") (term "0,1,0"))
   (rule "mul_literals" (formula "1") (term "1,0"))
   (rule "add_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (ifseqformula "15"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "18"))
   (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "15"))
    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "22")) (ifInst ""  (formula "6")))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0"))
   (rule "elementOfUnion" (formula "2") (term "0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "eqSymm" (formula "2") (term "0,0,0"))
   (rule "elementOfSingleton" (formula "2") (term "1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "sortsDisjointModuloNull" (formula "2") (term "0,0"))
   (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "22"))
    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "23")))
   (rule "applyEqReverse" (formula "1") (term "0,1,1") (ifseqformula "2"))
   (rule "hideAuxiliaryEq" (formula "2"))
   (rule "pullOutSelect" (formula "16") (term "1,1,0,0,0,0") (inst "selectSK=BinarySearch_size_0"))
   (rule "applyEq" (formula "18") (term "1,1,0,0,0") (ifseqformula "16"))
   (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "22")) (ifInst ""  (formula "5")))
   (rule "elementOfUnion" (formula "16") (term "0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "eqSymm" (formula "16") (term "0,0,0"))
   (rule "elementOfSingleton" (formula "16") (term "1,0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "applyEqReverse" (formula "17") (term "1,1,0,0,0,0") (ifseqformula "16"))
   (rule "applyEqReverse" (formula "18") (term "1,1,0,0,0") (ifseqformula "16"))
   (rule "hideAuxiliaryEq" (formula "16"))
   (rule "nnf_imp2or" (formula "17") (term "0,0"))
   (rule "nnf_notAnd" (formula "17") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0"))
   (rule "nnf_notAnd" (formula "17") (term "0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0"))
   (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,0"))
   (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,0"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
   (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "18") (ifseqformula "6"))
   (rule "true_left" (formula "18"))
   (rule "commute_or_2" (formula "17") (term "0,0,0"))
   (rule "cnf_eqv" (formula "16") (term "0"))
   (rule "nnf_notEx" (formula "16") (term "1,0,0"))
   (rule "nnf_notEx" (formula "16") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "16") (term "0,1,0,0"))
   (rule "nnf_notAnd" (formula "16") (term "0,0,1,0"))
   (rule "nnf_notAnd" (formula "16") (term "0,0,1,0,0"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,0,0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,1,0,0"))
   (rule "add_literals" (formula "16") (term "0,0,0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,0"))
   (rule "nnf_notAnd" (formula "16") (term "0,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,1,0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,1,0"))
   (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,1,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,1,0"))
   (rule "distr_forallAnd" (formula "16"))
   (rule "andLeft" (formula "16"))
   (rule "ex_pull_out3" (formula "17") (term "0"))
   (rule "ex_pull_out2" (formula "16") (term "0"))
   (rule "all_pull_out2" (formula "17") (term "0,0"))
   (rule "cnf_rightDist" (formula "17") (term "0,0,0"))
   (rule "shift_paren_or" (formula "17") (term "1,0,0,0"))
   (rule "commute_or" (formula "17") (term "0,1,0,0,0"))
   (rule "cnf_rightDist" (formula "17") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
   (rule "shift_paren_or" (formula "17") (term "1,0,0,0,0"))
   (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
   (rule "shift_paren_or" (formula "17") (term "0,1,0,0,0,0"))
   (rule "commute_or" (formula "17") (term "0,0,1,0,0,0,0"))
   (rule "all_pull_out3" (formula "16") (term "0,0"))
   (rule "commute_or" (formula "16") (term "0,0,0"))
   (rule "cnf_rightDist" (formula "16") (term "0,0,0"))
   (rule "commute_or" (formula "16") (term "1,0,0,0"))
   (rule "cnf_rightDist" (formula "16") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
   (rule "shift_paren_or" (formula "16") (term "1,0,0,0,0"))
   (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0"))
   (rule "commute_or" (formula "16") (term "0,1,0,0,0,0"))
   (rule "commute_and_2" (formula "17") (term "0,0,0"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "1") (inst "iv=iv"))
   (rule "andLeft" (formula "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "add_literals" (formula "1") (term "1,0,1"))
   (rule "add_literals" (formula "1") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
   (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "3"))
   (rule "lenOfSeqConcat" (formula "1") (term "0"))
   (rule "polySimp_homoEq" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "add_literals" (formula "1") (term "0,1,0"))
   (rule "mul_literals" (formula "1") (term "1,0"))
   (rule "add_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "commute_and_2" (formula "16") (term "0,0,0"))
    (builtin "Use Operation Contract" (formula "24") (newnames "heapBefore_search,result_22,exc_27,heapAfter_search,anon_heap_search") (contract "BinarySearch[BinarySearch::search()].JML normal_behavior operation contract.0"))
   (branch "Post (search)"
       (builtin "One Step Simplification" (formula "26"))
      (rule "assignment" (formula "26") (term "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallReturn" (formula "26") (term "1"))
      (rule "assignment" (formula "26") (term "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "tryEmpty" (formula "26") (term "1"))
      (rule "emptyModality" (formula "26") (term "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "pullOutSelect" (formula "26") (term "1,1,0") (inst "selectSK=BinarySearch_query_1"))
      (rule "pullOutSelect" (formula "27") (term "0,1,0") (inst "selectSK=arr_0"))
      (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=BinarySearch_numbers_0"))
      (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=arr_1"))
      (rule "applyEqReverse" (formula "30") (term "0,1,0") (ifseqformula "3"))
      (rule "hideAuxiliaryEq" (formula "3"))
      (rule "Class_invariant_axiom_for_BinarySearch" (formula "29") (term "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "commute_and" (formula "29"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "notLeft" (formula "25"))
      (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "25") (term "0") (ifseqformula "2"))
      (rule "applyEq" (formula "25") (term "1") (ifseqformula "3"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
      (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "30")))
      (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "27")))
      (rule "closeTrue" (formula "33"))
   )
   (branch "Exceptional Post (search)"
      (rule "methodCallParamThrow" (formula "26") (term "1,1") (userinteraction))
      (rule "tryCatchThrow" (formula "26") (term "1,1"))
      (rule "ifElseUnfold" (formula "26") (term "1,1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "26") (term "1,1") (newnames "x_1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "equality_comparison_simple" (formula "26") (term "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "ifElseSplit" (formula "26"))
      (branch "if x_1 true"
          (builtin "One Step Simplification" (formula "27"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elim_double_block" (formula "27") (term "1"))
         (rule "throwUnfold" (formula "27") (term "1") (inst "#v0=n"))
         (rule "variableDeclarationAssign" (formula "27") (term "1"))
         (rule "variableDeclaration" (formula "27") (term "1") (newnames "n"))
          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
         (rule "closeFalse" (formula "21"))
      )
      (branch "if x_1 false"
          (builtin "One Step Simplification" (formula "27"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "elim_double_block" (formula "27") (term "1"))
         (rule "ifElseSplit" (formula "27"))
         (branch "if exc_27 instanceof java.lang.Throwable true"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "27") (term "1") (newnames "e"))
            (rule "delete_unnecessary_cast" (formula "27") (term "1"))
             (builtin "One Step Simplification" (formula "28"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "27") (term "1"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "emptyModality" (formula "27") (term "1"))
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "21")))
            (rule "false_right" (formula "27"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
            (rule "closeFalse" (formula "20"))
         )
         (branch "if exc_27 instanceof java.lang.Throwable false"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Pre (search)"
       (builtin "One Step Simplification" (formula "24"))
      (rule "andRight" (formula "24") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "24") (userinteraction))
         (branch "Case 1"
            (rule "notRight" (formula "24") (userinteraction))
            (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=BinarySearch_numbers_0"))
            (rule "simplifySelectOfCreate" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "7")))
            (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
            (rule "ifEqualsNull" (formula "1"))
            (rule "replace_known_right" (formula "1") (term "1,1") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "elementOfUnion" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "0"))
            (rule "elementOfSingleton" (formula "1") (term "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "sortsDisjointModuloNull" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "close" (formula "25") (ifseqformula "2"))
         )
         (branch "Case 2"
            (rule "andRight" (formula "24") (userinteraction))
            (branch "Case 1"
               (rule "allRight" (formula "24") (inst "sk=j_0") (userinteraction))
               (rule "allRight" (formula "24") (inst "sk=m_0") (userinteraction))
               (rule "impRight" (formula "24") (userinteraction))
               (rule "andLeft" (formula "1") (userinteraction))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_ltRight" (formula "27"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=BinarySearch_size_1"))
               (rule "simplifySelectOfCreate" (formula "4"))
                (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "28")))
               (rule "replaceKnownSelect_taclet0_3" (formula "4") (term "0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "4") (term "0"))
               (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=BinarySearch_numbers_0"))
               (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "10")))
               (rule "elementOfUnion" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
               (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
               (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
               (rule "mul_literals" (formula "2") (term "0,0"))
               (rule "add_zero_left" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "17")))
               (rule "inEqSimp_commuteGeq" (formula "2"))
               (rule "elementOfUnion" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "17")))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "elementOfUnion" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "allLeft" (formula "23") (inst "t=j_0"))
               (rule "replaceKnownSelect_taclet01020_14" (formula "23") (term "0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet01020_15" (formula "23") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "23") (term "1,0"))
               (rule "polySimp_addComm1" (formula "23") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0"))
               (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0,0,0") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,0,0,1,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "23") (term "1,1,0,0,1,0,0,0"))
               (rule "times_zero_1" (formula "23") (term "1,0,0,1,0,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,1,0,0,0"))
               (rule "leq_literals" (formula "23") (term "0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "cut_direct" (formula "7") (term "0"))
               (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "allLeft" (formula "23") (inst "t=m_0"))
                  (rule "replaceKnownSelect_taclet01020_11" (formula "23") (term "0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet01020_12" (formula "23") (term "0,1"))
                  (rule "inEqSimp_contradInEq0" (formula "23") (term "1,0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "23") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                  (rule "add_literals" (formula "23") (term "0,0,1"))
                  (rule "leq_literals" (formula "23") (term "0,1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "23") (term "0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "closeFalse" (formula "23"))
               )
               (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "allLeft" (formula "23") (inst "t=m_0"))
                  (rule "replaceKnownSelect_taclet01020_11" (formula "23") (term "0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet01020_12" (formula "23") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                  (rule "add_literals" (formula "23") (term "0,0,1"))
                  (rule "leq_literals" (formula "23") (term "0,1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "23") (term "0,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq0" (formula "23") (ifseqformula "4"))
                  (rule "andLeft" (formula "23"))
                  (rule "inEqSimp_homoInEq1" (formula "23"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                  (rule "add_literals" (formula "23") (term "1,1,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0"))
                  (rule "add_literals" (formula "23") (term "0"))
                  (rule "leq_literals" (formula "23"))
                  (rule "closeFalse" (formula "23"))
               )
            )
            (branch "Case 2"
               (rule "Class_invariant_axiom_for_BinarySearch" (formula "24") (ifseqformula "6"))
               (rule "closeTrue" (formula "24"))
            )
         )
      )
      (branch "Case 2"
         (rule "wellFormedCreate" (formula "24"))
         (rule "wellFormedAnonEQ" (formula "24") (ifseqformula "14"))
         (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "13")))
         (rule "closeTrue" (formula "24"))
      )
   )
)
(branch "Exceptional Post (eliminateDuplicates)"
   (rule "blockThrow" (formula "16") (term "1,1") (userinteraction))
   (rule "methodCallParamThrow" (formula "16") (term "1,1") (userinteraction))
    (builtin "One Step Simplification" (formula "16"))
   (rule "tryCatchThrow" (formula "16") (term "1"))
   (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "x"))
   (rule "equality_comparison_simple" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "ifElseSplit" (formula "16"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "17"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elim_double_block" (formula "17") (term "1"))
      (rule "throwUnfold" (formula "17") (term "1") (inst "#v0=n"))
      (rule "variableDeclarationAssign" (formula "17") (term "1"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "n"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
      (rule "closeFalse" (formula "13"))
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "17"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "elim_double_block" (formula "17") (term "1"))
      (rule "ifElseSplit" (formula "17"))
      (branch "if exc_26 instanceof java.lang.Throwable true"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
         (rule "true_left" (formula "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "e"))
         (rule "delete_unnecessary_cast" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "assignment" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "emptyModality" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "13")))
         (rule "false_right" (formula "17"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
         (rule "closeFalse" (formula "12"))
      )
      (branch "if exc_26 instanceof java.lang.Throwable false"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Pre (eliminateDuplicates)"
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "2")) (ifInst ""  (formula "13")) (ifInst ""  (formula "9")))
   (rule "andRight" (formula "14") (userinteraction))
   (branch "Case 1"
      (rule "allRight" (formula "14") (inst "sk=j_0") (userinteraction))
      (rule "allRight" (formula "14") (inst "sk=i_0") (userinteraction))
      (rule "impRight" (formula "14") (userinteraction))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_leqRight" (formula "17"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "4"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "allLeft" (formula "10") (inst "t=j_0"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0"))
      (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0,0,0") (ifseqformula "4"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0"))
      (rule "leq_literals" (formula "10") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "allLeft" (formula "10") (inst "t=i_0"))
      (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "2"))
      (rule "qeq_literals" (formula "10") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0"))
      (rule "leq_literals" (formula "10") (term "0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
      (rule "andLeft" (formula "10"))
      (rule "inEqSimp_homoInEq1" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
      (rule "add_literals" (formula "10") (term "1,1,0"))
      (rule "times_zero_1" (formula "10") (term "1,0"))
      (rule "add_zero_right" (formula "10") (term "0"))
      (rule "leq_literals" (formula "10"))
      (rule "closeFalse" (formula "10"))
   )
   (branch "Case 2"
      (rule "Class_invariant_axiom_for_BinarySearch" (formula "14") (ifseqformula "4"))
      (rule "closeTrue" (formula "14"))
   )
)
)
}

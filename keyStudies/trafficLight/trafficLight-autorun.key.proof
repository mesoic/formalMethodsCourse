\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Dec 29 18:06:57 CET 2020
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:teaching , methodExpansion-methodExpansion\\:noRestriction
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Labels]UseOriginLabels=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[SMTSettings]explicitTypeHierarchy=false
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
"
}

\sorts {
	Light;
}

\predicates {
	red(Light);
	grn(Light);
	int(Light, Light);
}

\problem {
     \forall Light x;
       ((red(x) -> !grn(x)) & (grn(x) -> !red(x)))
   & \forall Light x;
       \forall Light y; (int(x, y) -> red(x) | red(y))
->   !\exists Light x;
        \exists Light y; (int(x, y) & grn(x) & grn(y))
   & \exists Light x; \exists Light y; int(x, y)
-> \exists Light z; red(z)

}

\proof {
(keyLog "0" (keyUser "mesoic" ) (keyVersion "a6034b00a3"))

(autoModeTime "131")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "impRight" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "exLeft" (formula "1") (inst "sk=x_0"))
(rule "exLeft" (formula "1") (inst "sk=y_0"))
(rule "nnf_ex2all" (formula "5"))
(rule "nnf_ex2all" (formula "5"))
(rule "nnf_notEx" (formula "1") (term "0"))
(rule "nnf_imp2or" (formula "5") (term "0,0"))
(rule "nnf_imp2or" (formula "4") (term "0,0"))
(rule "nnf_imp2or" (formula "4") (term "1,0"))
(rule "nnf_notAnd" (formula "1") (term "0,0"))
(rule "nnf_notAnd" (formula "1") (term "0,0,0"))
(rule "distr_forallAnd" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "commute_or" (formula "4") (term "0"))
(rule "commute_or" (formula "5") (term "0,0"))
(rule "commute_or" (formula "1") (term "0,0,0"))
(rule "commute_or_2" (formula "1") (term "0,0"))
(rule "allLeft" (formula "5") (inst "t=x_0"))
(rule "commute_or" (formula "5") (term "0,0"))
(rule "commute_or_2" (formula "5") (term "0"))
(rule "cut_direct" (formula "5") (term "1,0"))
(branch "CUT: red(x_0) TRUE"
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "allLeft" (formula "2") (inst "t=x_0"))
   (rule "notLeft" (formula "2"))
   (rule "close" (formula "7") (ifseqformula "5"))
)
(branch "CUT: red(x_0) FALSE"
    (builtin "One Step Simplification" (formula "5"))
   (rule "allLeft" (formula "5") (inst "t=x_0"))
   (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "notLeft" (formula "5"))
   (rule "allLeft" (formula "5") (inst "t=y_0"))
   (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "allLeft" (formula "2") (inst "t=y_0"))
   (rule "notLeft" (formula "2"))
   (rule "close" (formula "8") (ifseqformula "5"))
)
)
}
